name: Nightly Builds

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      linux:
        description: 'Run Linux build'
        type: boolean
        default: true
      mac:
        description: 'Run macOS build'
        type: boolean
        default: true
      windows:
        description: 'Run Windows build'
        type: boolean
        default: true
      force:
        description: 'Force build even if no changes since last nightly'
        type: boolean
        default: false

permissions:
  contents: write

concurrency: nightly-${{ github.workflow }}

env:
  NIGHTLY_TAG: nightly-latest

jobs:
  linux:
    name: Nightly Build (Linux)
    if: github.event_name == 'schedule' || inputs.linux == true
    runs-on: ubuntu-latest
    outputs:
      built: ${{ steps.flag.outputs.built }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Check changes since last nightly
        id: diff
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.force != true)
        run: |
          TAG="${{ env.NIGHTLY_TAG }}"
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            if git diff --quiet "$TAG"...HEAD -- .; then
              echo "skip=true" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: No changes — skip build
        if: steps.diff.outputs.skip == 'true'
        run: echo "No changes since last nightly. Skipping."

      - name: Set up Docker Buildx
        if: steps.diff.outputs.skip != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build AppImage
        if: steps.diff.outputs.skip != 'true'
        run: |
          make AppImage
          mkdir -p dist
          cp artifacts/Lem-x86_64.AppImage dist/Lem-x86_64.AppImage

      - name: Upload artifact (Linux)
        if: steps.diff.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: lem-linux
          path: dist/Lem-x86_64.AppImage
          if-no-files-found: error

      - name: Flag built
        id: flag
        run: echo "built=true" >> "$GITHUB_OUTPUT"

  macos:
    name: Nightly Build (macOS)
    if: github.event_name == 'schedule' || inputs.mac == true
    runs-on: macos-latest
    outputs:
      built: ${{ steps.flag.outputs.built }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Check changes since last nightly
        id: diff
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.force != true)
        run: |
          TAG="${{ env.NIGHTLY_TAG }}"
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            if git diff --quiet "$TAG"...HEAD -- .; then
              echo "skip=true" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: No changes — skip build
        if: steps.diff.outputs.skip == 'true'
        run: echo "No changes since last nightly. Skipping."

      - name: Set up Common Lisp environment
        if: steps.diff.outputs.skip != 'true'
        run: |
          brew install sbcl
          curl -O https://beta.quicklisp.org/quicklisp.lisp
          sbcl --non-interactive --load quicklisp.lisp --eval "(quicklisp-quickstart:install)"
          curl -L https://qlot.tech/installer | sh
          echo "$HOME/.qlot/bin" >> $GITHUB_PATH

      - name: Build Lem executable
        if: steps.diff.outputs.skip != 'true'
        run: |
          scripts/macos-deploy.bash
          test -f lem-macos.zip

      - name: Upload artifact (macOS)
        if: steps.diff.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: lem-macos
          path: lem-macos.zip
          if-no-files-found: error

      - name: Flag built
        id: flag
        run: echo "built=true" >> "$GITHUB_OUTPUT"

  windows:
    name: Nightly Build (Windows)
    if: github.event_name == 'schedule' || inputs.windows == true
    runs-on: windows-latest
    outputs:
      built: ${{ steps.flag.outputs.built }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Fetch tags
        shell: bash
        run: git fetch --tags --force

      - name: Check changes since last nightly
        id: diff
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.force != true)
        shell: bash
        run: |
          TAG="${{ env.NIGHTLY_TAG }}"
          if git rev-parse -q --verify "refs/tags/$TAG" >/dev/null; then
            if git diff --quiet "$TAG"...HEAD -- .; then
              echo "skip=true" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: No changes — skip build
        if: steps.diff.outputs.skip == 'true'
        shell: pwsh
        run: echo "No changes since last nightly. Skipping."

      - name: Install SBCL (latest MSI)
        if: steps.diff.outputs.skip != 'true'
        shell: pwsh
        run: |
          $rel = Invoke-RestMethod -Uri "https://api.github.com/repos/roswell/sbcl_bin/releases/latest" -Headers @{ "User-Agent" = "gh-actions" }
          $asset = $rel.assets | Where-Object { $_.name -match '\.msi$' -and $_.name -match 'windows' } | Select-Object -First 1
          if (-not $asset) { throw "SBCL MSI not found in latest release." }
          $msi = Join-Path $env:RUNNER_TEMP "sbcl.msi"
          Invoke-WebRequest $asset.browser_download_url -OutFile $msi
          Start-Process msiexec.exe -Wait -ArgumentList "/i `"$msi`" /qn /norestart"
          $sbcl = Get-Command sbcl.exe -ErrorAction SilentlyContinue
          if (-not $sbcl) {
            # PATHに入っていない場合はインストール先を探索して追加
            $sbclExe = Get-ChildItem "C:\Program Files\Steel Bank Common Lisp" -Recurse -Filter sbcl.exe -ErrorAction SilentlyContinue | Select-Object -First 1
            if (-not $sbclExe) { throw "sbcl.exe not found after install." }
            echo ($sbclExe.DirectoryName) | Out-File -FilePath $env:GITHUB_PATH -Append
          }

      - name: Install Quicklisp
        if: steps.diff.outputs.skip != 'true'
        shell: pwsh
        run: |
          Invoke-WebRequest https://beta.quicklisp.org/quicklisp.lisp -OutFile quicklisp.lisp
          & sbcl --load quicklisp.lisp --eval "(quicklisp-quickstart:install)" --eval "(ql::without-prompting (ql:add-to-init-file))" || exit $LASTEXITCODE

      # qlfile を解釈して $HOME/common-lisp へ clone
      # "git <name> <url>" と "ql uiop" のケースのみを処理
      - name: Resolve qlfile dependencies
        if: steps.diff.outputs.skip != 'true'
        shell: pwsh
        run: |
          $qlfile = Join-Path $PWD "qlfile"
          $dst = Join-Path $env:USERPROFILE "common-lisp"
          New-Item -ItemType Directory -Force -Path $dst | Out-Null
          if (Test-Path $qlfile) {
            Get-Content $qlfile | ForEach-Object {
              $line = $_.Trim()
              if ($line -eq "" -or $line.StartsWith("#")) { return }
              if ($line -match '^git\s+(\S+)\s+(\S+)$') {
                $name = $Matches[1]; $url = $Matches[2]
                $target = Join-Path $dst $name
                if (-not (Test-Path $target)) {
                  git clone --depth 1 $url $target
                }
              }
              elseif ($line -match '^ql\s+uiop$') {
                # asdf/uiop 最新を取得し make-asdf.sh を実行
                $asdfDir = Join-Path $dst "asdf"
                if (-not (Test-Path $asdfDir)) {
                  git clone --depth 1 https://gitlab.common-lisp.net/asdf/asdf.git $asdfDir
                }
                bash -lc "cd '$asdfDir' && sh make-asdf.sh"
              }
            }
          } else {
            Write-Host "qlfile not found — skipping git/uiop clones."
          }

      - name: Link repo into quicklisp/local-projects
        shell: pwsh
        run: |
          $lp = Join-Path $env:USERPROFILE "quicklisp\local-projects"
          New-Item -ItemType Directory -Force -Path $lp | Out-Null
          cmd /c mklink /D "$lp\lem" "${{ github.workspace }}" 2>$null || robocopy "${{ github.workspace }}" "$lp\lem" /E /NFL /NDL /NJH /NJS /nc /ns /np | Out-Null

      - name: Build Lem (Windows)
        if: steps.diff.outputs.skip != 'true'
        shell: pwsh
        run: |
          & sbcl --non-interactive `
                 --eval "(ql:quickload :lem)" `
                 --eval "(asdf:make :lem)" || exit $LASTEXITCODE

      - name: Package artifacts (Windows)
        if: steps.diff.outputs.skip != 'true'
        shell: pwsh
        run: |
          $outDir = Join-Path $PWD "dist"
          New-Item -ItemType Directory -Force -Path $outDir | Out-Null
          $binDir = Join-Path $PWD "bin"
          if (-not (Test-Path $binDir)) { throw "bin directory not found." }
          $zip = Join-Path $outDir "lem-windows.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path (Join-Path $binDir '*') -DestinationPath $zip
          Write-Host "Packaged: $zip"

      - name: Upload artifact (Windows)
        if: steps.diff.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: lem-windows
          path: dist/lem-windows.zip
          if-no-files-found: error

      - name: Flag built
        id: flag
        shell: pwsh
        run: echo "built=true" >> $env:GITHUB_OUTPUT

  publish:
    name: Publish unified Nightly pre-release
    runs-on: ubuntu-latest
    needs: [linux, macos, windows]
    if: |
      needs.linux.result != 'cancelled' || needs.macos.result != 'cancelled' || needs.windows.result != 'cancelled'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d-%H%M')" >> "$GITHUB_OUTPUT"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: lem-*
          path: download
          merge-multiple: true

      - name: Collect files
        id: collect
        shell: bash
        run: |
          files=""
          [ -f download/Lem-x86_64.AppImage ] && files="$files"$'\n'"download/Lem-x86_64.AppImage"
          [ -f download/lem-macos.zip ] && files="$files"$'\n'"download/lem-macos.zip"
          [ -f download/lem-windows.zip ] && files="$files"$'\n'"download/lem-windows.zip"
          files="${files#"${files%%[!$'\n']*}"}"
          echo "files<<EOF" >> "$GITHUB_OUTPUT"
          echo "$files" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          if [ -z "$files" ]; then
            echo "No artifacts found to release."
            exit 78
          fi

      - name: Move/update nightly tag to current commit
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag -f "${{ env.NIGHTLY_TAG }}"
          git push -f origin "${{ env.NIGHTLY_TAG }}"

      - name: Create/Update unified nightly pre-release
        uses: softprops/action-gh-release@v2
        if: steps.collect.outputs.files != ''
        with:
          tag_name: ${{ env.NIGHTLY_TAG }}
          name: Nightly Build (Linux/macOS/Windows) - ${{ steps.date.outputs.date }}
          prerelease: true
          generate_release_notes: false
          files: ${{ steps.collect.outputs.files }}
